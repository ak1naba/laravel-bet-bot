name: Deploy Laravel to Server

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Copy project files to server
        run: |
          rsync -avz --delete -e "ssh -4 -o StrictHostKeyChecking=no" \
          --exclude='.git' \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='storage' \
          --exclude='.env' \
          --exclude='docker-compose.yml' \
          --exclude='node_modules' \
          --exclude='vendor' \
          ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/srv/laravel-bet-bot/

      - name: Verify .env file exists
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            cd /srv/laravel-bet-bot
            if [ -f /srv/variables/.env.production ]; then
              cp /srv/variables/.env.production app/.env
            fi
            if [ ! -f "app/.env" ]; then
              echo "‚ùå ERROR: app/.env not found!"
              exit 1
            fi 

      - name: Stop containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            cd /srv/laravel-bet-bot
            docker-compose down

      - name: Build containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            cd /srv/laravel-bet-bot
            docker-compose -f docker-compose.prod.yml up -d

      - name: Install PHP dependencies
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            docker exec laravel-app composer install --no-dev --optimize-autoloader

      - name: Set permissions
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            docker exec laravel-app chown -R www-data:www-data /var/www/storage
            docker exec laravel-app chmod -R 775 /var/www/storage
            docker exec laravel-app chmod -R 775 /var/www/bootstrap/cache

      - name: Clear and cache Laravel configs
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            docker exec laravel-app php artisan optimize
            docker exec laravel-app php artisan config:cache
            docker exec laravel-app php artisan route:cache
            docker exec laravel-app php artisan view:cache

      - name: Run migrations
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            docker exec laravel-app php artisan migrate --force

      - name: Restart Nginx
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          ssh_args: "-4"
          script: |
            docker restart nginx

      - name: ‚úÖ Deployment finished
        run: echo "üöÄ Deployment completed successfully!"
