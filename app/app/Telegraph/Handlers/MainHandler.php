<?php

namespace App\Telegraph\Handlers;

use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Models\TelegraphBot;
use DefStudio\Telegraph\DTO\TelegraphUpdate;
use Illuminate\Http\Request;

class MainHandler extends WebhookHandler
{
    public function handle(Request $request, TelegraphBot $bot): void
    {
        try {
            // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å
            $this->bot = $bot;
            $this->update = TelegraphUpdate::fromArray($request->all(), $bot);
            $this->chat = $this->update->chat();
            $this->message = $this->update->message();

            if ($this->message) {
                $this->handleMessage();
            } else {
                \Log::warning('Telegraph: –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', [
                    'update' => $request->all(),
                ]);
            }
        } catch (\Exception $e) {
            \Log::error('Telegraph: –û—à–∏–±–∫–∞ –≤ handle', [
                'error' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
            ]);
        }
    }

    // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================

    protected function handleMessage(): void
    {
        try {
            $message = $this->message->text();

            \Log::info('Telegraph: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', [
                'message' => $message,
                'chat_id' => $this->chat?->id,
            ]);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
            if ($this->isCommand($message)) {
                $command = $this->message->command();

                \Log::info('Telegraph: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞', [
                    'command' => $command,
                ]);

                match ($command) {
                    'start' => $this->start(),
                    'form' => $this->form(),
                    'profile' => $this->profile(),
                    default => $this->reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'),
                };
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
            $currentModule = $this->chat?->getConversationData('current_module');

            \Log::info('Telegraph: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è', [
                'current_module' => $currentModule,
            ]);

            if ($currentModule) {
                \Log::info('Telegraph: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª—è', ['module' => $currentModule]);
                $this->handleModuleMessage($currentModule);
                return;
            }

            $this->reply('üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞');

        } catch (\Exception $e) {
            \Log::error('Telegraph: –û—à–∏–±–∫–∞ –≤ handleMessage', [
                'error' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString(),
            ]);

            $this->reply('‚ùå –û—à–∏–±–∫–∞: ' . substr($e->getMessage(), 0, 100));
        }
    }

    // ==================== –ö–û–ú–ê–ù–î–´ ====================

    private function start(): void
    {
        \Log::info('Telegraph: –û–±—Ä–∞–±–æ—Ç–∫–∞ /start');

        $this->reply(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" .
            "/form - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n" .
            "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n" .
            "/help - –ü–æ–º–æ—â—å"
        );
    }

    private function form(): void
    {
        \Log::info('Telegraph: –û–±—Ä–∞–±–æ—Ç–∫–∞ /form');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º
        $this->chat->storeConversationData('current_module', 'form');
        $this->chat->storeConversationData('form_step', 'name');

        $this->reply('üìù –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!\n\n–≠—Ç–∞–ø 1/3 - –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?');
    }

    private function profile(): void
    {
        \Log::info('Telegraph: –û–±—Ä–∞–±–æ—Ç–∫–∞ /profile');

        $this->reply(
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n" .
            "ID: {$this->chat->id}\n" .
            "–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π"
        );
    }

    // ==================== –ú–û–î–£–õ–ò ====================

    private function handleModuleMessage(string $moduleName): void
    {
        match ($moduleName) {
            'form' => $this->handleFormStep(),
            default => $this->reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å'),
        };
    }

    private function handleFormStep(): void
    {
        $step = $this->chat->getConversationData('form_step');
        $message = $this->message->text();

        \Log::info('Telegraph: FormModule::handleFormStep', [
            'step' => $step,
            'message' => $message,
        ]);

        match ($step) {
            'name' => $this->formHandleName($message),
            'email' => $this->formHandleEmail($message),
            'phone' => $this->formHandlePhone($message),
            default => $this->reply('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∫–µ—Ç–µ'),
        };
    }

    private function formHandleName(string $name): void
    {
        if (strlen($name) < 2) {
            $this->reply('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
            return;
        }

        $this->chat->storeConversationData('form_name', $name);
        $this->chat->storeConversationData('form_step', 'email');
        $this->reply("‚úÖ –°–ø–∞—Å–∏–±–æ, {$name}!\n\n–≠—Ç–∞–ø 2/3 - –í–∞—à email:");
    }

    private function formHandleEmail(string $email): void
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $this->reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
            return;
        }

        $this->chat->storeConversationData('form_email', $email);
        $this->chat->storeConversationData('form_step', 'phone');
        $this->reply("‚úÖ Email –ø—Ä–∏–Ω—è—Ç!\n\n–≠—Ç–∞–ø 3/3 - –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX):");
    }

    private function formHandlePhone(string $phone): void
    {
        $normalized = str_replace([' ', '-', '(', ')'], '', $phone);
        if (!preg_match('/^\+?[0-9]{10,}$/', $normalized)) {
            $this->reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
            return;
        }

        $formData = [
            'name' => $this->chat->getConversationData('form_name'),
            'email' => $this->chat->getConversationData('form_email'),
            'phone' => $normalized,
        ];

        \Log::info('Telegraph: –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞', $formData);

        $this->reply(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n" .
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" .
            "–ò–º—è: {$formData['name']}\n" .
            "Email: {$formData['email']}\n" .
            "–¢–µ–ª–µ—Ñ–æ–Ω: {$normalized}"
        );

        $this->chat->deleteConversationData();
    }
}
